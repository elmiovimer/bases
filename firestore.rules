rules_version = '2';

service cloud.firestore {
  match /databases/(default)/documents {

    // This rule allows anyone with your Firestore database reference to view, edit,
    // and delete all data in your Firestore database. It is useful for getting
    // started, but it is configured to expire after 30 days because it
    // leaves your app open to attackers. At that time, all client
    // requests to your Firestore database will be denied.
    //
    // Make sure to write security rules for your app before that time, or else
    // all client requests to your Firestore database will be denied until you Update
    // your rules
    // match /{document=**} {
    //   allow read, write: if request.time < timestamp.date(2025, 3, 21);
    // }
    
    function isRol(rol){
    	return get(/databases/(default)/documents/Users/$(request.auth.uid)).data.roles[rol] == true;
    }
    
    match /intentsLogin/{intentId}{
    	allow get : if true;
      allow create : if true;
      allow update: if request.auth != null;
      allow delete: if true;
    }
    
    match /Products/{docId}{
    allow write: if false;
    allow read: if true;
    }
    
    match /Users/{userId}{
    	
     // allow write: if request.auth.uid == userId;
      
      
      allow create: if(request.auth.uid == userId 
      								&& !request.resource.data.roles.keys().hasAny(['admin'])
     							 ) || isRol('admin');
                   
      allow update: if( request.auth.uid == userId
      && request.resource.data.roles == resource.data.roles) || isRol('admin');
      
      allow delete: if request.auth.uid == userId || isRol('admin');
      
     allow get : if request.auth.uid == userId || isRol('admin');
      
      // allow get : if true;
      
      allow list: if isRol('admin');
      // allow list: if true;
    
      match /pedidos/{pedidoID}{
        allow read: if true;
      }
    }
    
    // match /{path=**}/pedidos/{pedidoId}{
    // 	allow read : if false;
    // }
    
  }
}